---
title: "d-seperation"
format: html
editor: visual
---

## Definition

Two variables are said to be d-separated if all paths between them are blocked (otherwise they are d-connected). Two sets of variables are said to be d-separated if each variable in the first set is d-separated from every variable in the second set.

## Rules: When is a path blocked?

1.  If there are no variables being conditioned on, a path is blocked if and only if two arrowheads on the path collide at somevariable on the path.

```{r}
library(ggdag)
dag1_confound_ggdag <- dagify(
 C ~ A + B
)
# Plot the DAG
ggdag(dag1_confound_ggdag) + theme_dag_blank()
```

### Beispiel:

**D=Drivingskills**\
**A=Alkohol**\
**U=Unfall**

Der Pfad zwischen den Drivingskills und dem Alkoholkonsum ist durch den Collider Unfall blockiert.

```{r}
dag2_confound_ggdag <- dagify(
  U ~ D + A
)
# Plot the DAG
ggdag(dag2_confound_ggdag, layout = "circle") + theme_dag_blank()
```

2.  Any path that contains a noncollider that has been conditioned on is blocked. The path between A and C is blocked, conditioning on B.

```{r}
dag3_confound_ggdag <- dagify(
C ~ B,
B ~ A,
coords = list(x = c(A = 1, B = 2, C = 3),
                y = c(A = 1, B = 1, C = 1))
)
# Plot the DAG
ggdag(dag3_confound_ggdag) + theme_dag_blank()
```

### Beispiel:

**B = Blutucker**\
**M = Magensäure**\
**H = Hunger**

Der Blutzuckerspiegel beeinflusst die Übersäuerung im Magen, welche wiederum ein Hungergefühl verursacht. Wenn wir den Pfad zwischen dem Blutzuckerspiegel und dem Hunger unter der Bedingung von einer Magenübersäuerung betrachten, ist dieser Pfad blockiert. Wir können keine Assoziation zwischen dem Blutzuckerspiegel und Hunger feststellen.

```{r}
dag4_confound_ggdag <- dagify(
  H ~ M,
  M ~ B,
   coords = list(x = c(B = 1, M = 2, H = 3),
                y = c(B = 1, M = 1, H = 1))
)
# Plot the DAG
ggdag(dag4_confound_ggdag) + theme_dag_blank()
```

3.  A collider that has been conditioned on does not block a path. If we condition on C, the path between A and B is not blocked. They are d-connected.

```{r}
dag5_confound_ggdag <- dagify(
 C ~ A + B
)
# Plot the DAG
ggdag(dag5_confound_ggdag, layout = "circle") + theme_dag_blank()
```

Durch die Konditionierung auf "Unfall" ist der Pfad zwischen Drivingskills und Alkohol nicht mehr blockiert.

```{r}
dag6_confound_ggdag <- dagify(
  U ~ D + A
)
# Plot the DAG
ggdag(dag6_confound_ggdag, layout = "circle") + theme_dag_blank()

```

4.  A collider that has a descendant that has been conditioned on does not block a path.

```{r}
library(ggdag)
dag7_confound_ggdag <- dagify(
 C ~ A + B,
 D ~C,
 coords = list(x = c(B = 1, C = 2, D = 2, A = 3),
                y = c(B = 3, C = 2, D = 1, A = 3))
)
# Plot the DAG
ggdag(dag7_confound_ggdag) + theme_dag_blank()
```

## Example

If we measure the weather, the path between weather and sleep is blocked by the collider Mood (rule 1)

If we measure the weather, Mood and Outfit are conditionally independent, given weather (rule 2)

If we measure the Mood, the weather is conditionally independent of productivity, given Mood (rule 2)

Weather and sleep are d-connected, given Mood (rule 3)

If we condition on productivity, weather and sleep are also d-connected (rule 4)

```{r dag3}
library (dagitty)
dag9 <- dagitty("dag {
  Sleep -> Mood
  Weather -> Mood
  Mood ->Productivity
  Weather -> Outfit
 }")
plot( graphLayout( dag9 ) )
library(ggdag)
tidy_dag9 <- tidy_dagitty(dag9)
ggdag(tidy_dag9) +
  theme_dag()
```
